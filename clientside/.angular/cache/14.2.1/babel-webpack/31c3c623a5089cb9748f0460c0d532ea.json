{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/auth.service\";\nimport * as i2 from \"../../service/notification.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/button\";\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(authService, notificationService, fb) {\n      this.authService = authService;\n      this.notificationService = notificationService;\n      this.fb = fb;\n    }\n\n    ngOnInit() {\n      this.registerForm = this.createRegisterForm();\n    }\n\n    createRegisterForm() {\n      return this.fb.group({\n        email: ['', Validators.compose([Validators.required, Validators.email])],\n        username: ['', Validators.compose([Validators.required])],\n        firstname: ['', Validators.compose([Validators.required])],\n        lastname: ['', Validators.compose([Validators.required])],\n        password: ['', Validators.compose([Validators.required])],\n        confirmPassword: ['', Validators.compose([Validators.required])]\n      });\n    }\n\n    submit() {\n      console.log(this.registerForm.value);\n      this.authService.register({\n        email: this.registerForm.value.email,\n        username: this.registerForm.value.username,\n        firstname: this.registerForm.value.firstname,\n        lastname: this.registerForm.value.lastname,\n        password: this.registerForm.value.password,\n        confirmPassword: this.registerForm.value.confirmPassword\n      }).subscribe(data => {\n        console.log(data);\n        this.notificationService.showSnackBar('Successfully Registered!');\n      }, error => {\n        this.notificationService.showSnackBar('Something went wrong during registration');\n      });\n    }\n\n  }\n\n  RegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.NotificationService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n\n  RegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 40,\n    vars: 2,\n    consts: [[1, \"register-page\"], [\"routerLink\", \"/login\"], [3, \"formGroup\"], [1, \"justify-content-center\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"formControlName\", \"email\"], [\"matInput\", \"\", \"formControlName\", \"username\"], [\"matInput\", \"\", \"formControlName\", \"firstname\"], [\"matInput\", \"\", \"formControlName\", \"lastname\"], [\"type\", \"password\", \"matInput\", \"\", \"formControlName\", \"password\"], [\"type\", \"password\", \"matInput\", \"\", \"formControlName\", \"confirmPassword\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", 2, \"width\", \"5rem\", 3, \"disabled\", \"click\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"p\");\n        i0.ɵɵtext(4, \"Already have an account? \");\n        i0.ɵɵelementStart(5, \"a\", 1);\n        i0.ɵɵtext(6, \"Sign in\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"form\", 2)(8, \"div\", 3)(9, \"mat-form-field\", 4)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Email Address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 3)(14, \"mat-form-field\", 4)(15, \"mat-label\");\n        i0.ɵɵtext(16, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 3)(19, \"mat-form-field\", 4)(20, \"mat-label\");\n        i0.ɵɵtext(21, \"First name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"input\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(23, \"div\", 3)(24, \"mat-form-field\", 4)(25, \"mat-label\");\n        i0.ɵɵtext(26, \"Last name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"input\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"div\", 3)(29, \"mat-form-field\", 4)(30, \"mat-label\");\n        i0.ɵɵtext(31, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(32, \"input\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(33, \"div\", 3)(34, \"mat-form-field\", 4)(35, \"mat-label\");\n        i0.ɵɵtext(36, \"Confirm password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(37, \"input\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(38, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_38_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵtext(39, \" Register \");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(31);\n        i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n      }\n    },\n    dependencies: [i4.RouterLinkWithHref, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i5.MatFormField, i5.MatLabel, i6.MatInput, i7.MatButton],\n    styles: [\".register-page[_ngcontent-%COMP%]{text-align:center;margin-top:5rem}mat-form-field[_ngcontent-%COMP%]{width:50%}\"]\n  });\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}